# =============================================================================
# Copyright (c) 2020-2023, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
# =============================================================================

include(GenerateExportHeader)

# # Place the two cuda sources in their own target and disable IWYU for that target.
# add_library(cuda_objs
#   OBJECT
#     src/utilities/matx_util.cu
# )

# set_target_properties(
#   cuda_objs
#   PROPERTIES
#     CUDA_STANDARD 17
#     CUDA_STANDARD_REQUIRED ON
#     C_INCLUDE_WHAT_YOU_USE ""
#     CXX_INCLUDE_WHAT_YOU_USE ""
#     EXPORT_COMPILE_COMMANDS OFF
# )

# # Set the includes as private because we want the public to be on libmorpheus
# target_include_directories(cuda_objs
#   PRIVATE
#     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
#     $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/autogenerated/include> # Include the generated version file
#     $<INSTALL_INTERFACE:include>
# )

# # Set the links as private because we want the public to be on libmorpheus
# target_link_libraries(cuda_objs
#   PRIVATE
#     mrc::pymrc
#     cudf::cudf
#     matx::matx
# )

morpheus_configure_libmd()

morpheus_configure_libbsd()

set(doca_ROOT "/opt/mellanox/doca")

find_package(doca REQUIRED)

add_library(morpheus_doca
  # Keep these sorted!
  doca_context.cpp
  doca_rx_pipe.cpp
  doca_rx_queue.cpp
  doca_semaphore.cpp
  rte_context.cpp
  # src/stages/doca_source.cpp
  doca_source_kernels.cu
)

add_library(${PROJECT_NAME}::morpheus_doca ALIAS morpheus_doca)

target_link_libraries(morpheus_doca
  PRIVATE
    ${PROJECT_NAME}::morpheus
    doca::doca
)

# Ideally, we dont use glob here. But there is no good way to guarantee you dont miss anything like *.cpp
file(GLOB_RECURSE morpheus_doca_public_headers
  LIST_DIRECTORIES FALSE
  CONFIGURE_DEPENDS
  "${CMAKE_CURRENT_SOURCE_DIR}/*.hpp"
)

# Add headers to target sources file_set so they can be installed
# https://discourse.cmake.org/t/installing-headers-the-modern-way-regurgitated-and-revisited/3238/3
target_sources(morpheus_doca
  PUBLIC
    FILE_SET public_headers
    TYPE HEADERS
    FILES
      ${morpheus_doca_public_headers}
)

target_compile_definitions(morpheus_doca
  PUBLIC
    DOCA_ALLOW_EXPERIMENTAL_API
)

set_target_properties(morpheus_doca
  PROPERTIES
    CXX_VISIBILITY_PRESET hidden
    CUDA_STANDARD 17
    CUDA_STANDARD_REQUIRED ON
    CUDA_SEPARABLE_COMPILATION ON
)

install(
  TARGETS
    morpheus_doca
  EXPORT
    ${PROJECT_NAME}-exports
  FILE_SET
    public_headers
  COMPONENT
    Wheel
)

if (MORPHEUS_PYTHON_INPLACE_BUILD)
  morpheus_utils_inplace_build_copy(morpheus_doca ${CMAKE_CURRENT_SOURCE_DIR})
endif()
